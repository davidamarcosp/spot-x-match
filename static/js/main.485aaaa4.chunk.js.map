{"version":3,"sources":["Context/ArtistContext.js","Hooks/useArtistState.js","Hooks/useAlbumState.js","Hooks/useLyricState.js","Hooks/useSongState.js","Hooks/useTokenState.js","Hooks/useSingleState.js","Components/SearchBar.js","Styles/SearchBarStyles.js","Hooks/useInputState.js","Components/ArtistAvatar.js","Styles/ArtistAvatarStyles.js","Components/Song.js","Styles/SongStyles.js","Components/Lyrics.js","Styles/LyricsStyles.js","Components/SongsList.js","Styles/SongListStyles.js","Components/Single.js","Styles/SingleStyles.js","Components/SinglesList.js","Styles/SinglesListStyles.js","Components/Album.js","Styles/AlbumStyles.js","Components/AlbumsGrid.js","Styles/AlbumGridStyles.js","App.js","serviceWorker.js","index.js"],"names":["ArtistContext","createContext","ArtistProvider","props","initialVal","spotifyApi","SpotifyWebApi","useState","artist","setArtist","artistName","token","a","setAccessToken","searchArtists","limit","then","data","artistResponse","body","artists","items","artistMetaData","id","name","images","genres","url","external_urls","getArtistAlbums","albumsResponse","filter","album","album_type","album_group","index","arr","findIndex","toUpperCase","Promise","all","single","s","map","getAlbumTracks","preview_url","release_date","image","catch","e","console","log","albums","singles","useArtistState","pickArtist","setAlbum","albumID","error","useAlbumState","pickAlbum","resetAlbum","mxm","Musixmatch","lyrics","setLyrics","songName","getLyricsMatcher","q_artist","toLowerCase","q_track","message","header","status_code","lyrics_body","slice","useLyricState","pickLyrics","resetLyrics","song","setSong","playing","setPlaying","songUrl","useSongState","pickSong","play","setToken","useEffect","axios","get","res","access_token","localStorage","setItem","getExpirationDate","expires_in","seconds","miliseconds","Date","now","Wait","ms","resolve","setTimeout","expiration","getItem","useTokenState","isTokenExpired","setSingles","event","newValue","useSingleState","handleSingleChange","resetSingles","Provider","value","children","withStyles","notchedOutline","borderColor","input","height","width","fontSize","form","display","justifyContent","marginTop","alignItems","spinner","position","right","setValue","target","useInputState","handleChange","reset","useContext","isLoading","setLoading","className","classes","noValidate","autoComplete","onSubmit","preventDefault","TextField","label","onChange","placeholder","InputProps","InputLabelProps","style","color","shrink","margin","variant","CircularProgress","size","opacity","artistWrapper","flexDirection","artistCard","maxWidth","marginBottom","background","boxShadow","zIndex","transition","artistAvatar","borderRadius","fontWeight","textShadow","artistTooltip","top","left","playerWrapper","nowPlaying","maxHeight","overflow","ToggleButtonGroup","exclusive","aria-label","ToggleButton","disabled","onClick","Card","CardHeader","avatar","Avatar","src","CardContent","Typography","gutterBottom","component","align","Tooltip","title","controls","config","file","attributes","controlsList","onContextMenu","player","volume","noWrap","marginLeft","songSubtext","songNumber","ListItem","button","ListItemText","secondary","secondaryTypographyProps","root","Divider","lyricsWrapper","fontFamily","minWidth","textAlign","padding","marginRight","Grow","in","IconButton","TextareaAutosize","rowsMin","songLyrics","TransitionUp","Slide","direction","minHeight","list","alignSelf","snackbarText","snackbar","backgroundColor","List","i","key","Snackbar","open","TransitionComponent","ContentProps","singleImage","singleName","singleNameWrapper","textOverflow","singleSubtext","releasedDate","singleUrl","ListItemAvatar","primaryTypographyProps","singleID","albumGrid","cursor","albumArt","length","GridListTile","albumId","albumCover","alt","GridListTileBar","albumName","subtitle","gridList","GridList","cellHeight","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.485aaaa4.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\nimport useArtistState from '../Hooks/useArtistState';\r\nimport useAlbumState from '../Hooks/useAlbumState';\r\nimport useLyricState from '../Hooks/useLyricState';\r\nimport useSongState from '../Hooks/useSongState';\r\nimport useTokenState from '../Hooks/useTokenState';\r\nimport useSingleState from '../Hooks/useSingleState';\r\n\r\nexport const ArtistContext = createContext();\r\n\r\nexport function ArtistProvider(props) {\r\n\r\n  const [artist, pickArtist] = useArtistState();\r\n  const [album, pickAlbum, resetAlbum] = useAlbumState();\r\n  const [lyrics, pickLyrics, resetLyrics] = useLyricState();\r\n  const [song, pickSong, playing, play] = useSongState();\r\n  const [isTokenExpired] = useTokenState();\r\n  const [singles, handleSingleChange, resetSingles] = useSingleState(false);\r\n\r\n  return (\r\n    <ArtistContext.Provider \r\n      value={{ \r\n        artist, \r\n        pickArtist, \r\n        album, \r\n        pickAlbum, \r\n        resetAlbum,\r\n        lyrics,\r\n        pickLyrics,\r\n        resetLyrics,\r\n        song,\r\n        pickSong,\r\n        playing,\r\n        play,\r\n        isTokenExpired,\r\n        singles,\r\n        handleSingleChange,\r\n        resetSingles\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ArtistContext.Provider>\r\n  );\r\n};","import SpotifyWebApi from 'spotify-web-api-node';\r\nimport { useState } from \"react\";\r\n\r\nexport default initialVal => {\r\n\r\n  const spotifyApi = new SpotifyWebApi();\r\n  const [artist, setArtist] = useState(initialVal);\r\n\r\n  const pickArtist = async (artistName, token) => {\r\n\r\n    spotifyApi.setAccessToken(token);\r\n    spotifyApi.searchArtists(artistName, { limit: 1 })\r\n      .then(data => {\r\n        let artistResponse = data.body.artists.items[0];\r\n        // if(!artistResponse){\r\n        //   setArtist(null);\r\n        //   throw new Error ('Artist not found');\r\n        // }\r\n        let artistMetaData = {\r\n          id: artistResponse.id,\r\n          name: artistResponse.name,\r\n          images: artistResponse.images,\r\n          genres: artistResponse.genres,\r\n          url: artistResponse.external_urls\r\n        }\r\n        spotifyApi.getArtistAlbums(artistResponse.id, { limit: 50 })\r\n          .then(async data => {\r\n            let albumsResponse = data.body.items;\r\n            artistMetaData = {\r\n              ...artistMetaData,\r\n              albums: albumsResponse\r\n                .filter(album => album.album_type === 'album' && album.album_group === 'album')\r\n                .filter((album, index, arr) => {\r\n                  return index === arr.findIndex((a) => {\r\n                    return a.name.toUpperCase() === album.name.toUpperCase()\r\n                  });\r\n                }),\r\n              singles: await Promise.all(albumsResponse\r\n                .filter(album => album.album_type === 'single')\r\n                .filter((single, index, arr) => {\r\n                  return index === arr.findIndex((s) => {\r\n                    return s.name.toUpperCase() === single.name.toUpperCase()\r\n                  });\r\n                })\r\n                .map(async s => {\r\n                  return spotifyApi.getAlbumTracks(s.id)\r\n                    .then(data => {\r\n                      let preview_url = data.body.items[0].preview_url;\r\n                      let name = data.body.items[0].name;\r\n                      let release_date = s.release_date;\r\n                      let image = s.images[2].url;\r\n                      let id = s.id;\r\n                      let singleMetadata = { name, release_date, image, id, preview_url };\r\n                      return singleMetadata;\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e);\r\n                    })\r\n                }))\r\n            };\r\n            setArtist(artistMetaData);\r\n          })\r\n          .catch(e => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      })\r\n\r\n  };\r\n\r\n  return [artist, pickArtist];\r\n\r\n};","import SpotifyWebApi from 'spotify-web-api-node';\r\nimport { useState } from \"react\";\r\n\r\nexport default initialVal => {\r\n\r\n  const spotifyApi = new SpotifyWebApi();\r\n  const [album, setAlbum] = useState(initialVal);\r\n\r\n  const pickAlbum = async (albumID, token) => {\r\n\r\n    spotifyApi.setAccessToken(token);\r\n    spotifyApi.getAlbumTracks(albumID)\r\n    .then(data => {\r\n      setAlbum(data.body.items);\r\n    })\r\n    .catch(e => {\r\n      console.error(e);\r\n    });\r\n\r\n  };\r\n\r\n  const resetAlbum = () => {\r\n    setAlbum();\r\n  };\r\n\r\n  return [album, pickAlbum, resetAlbum];\r\n};","import Musixmatch from 'musixmatch-node';\r\nimport { useState } from 'react';\r\n\r\nexport default initialVal => {\r\n\r\n  const mxm = new Musixmatch('724f6d4a2cffed7daf345f166c4974dd');\r\n  const [lyrics, setLyrics] = useState(initialVal);\r\n\r\n  const pickLyrics = async (artistName, songName) => {\r\n\r\n    mxm.getLyricsMatcher({\r\n      q_artist: artistName.toLowerCase(),\r\n      q_track: songName.toLowerCase(),\r\n    })\r\n    .then(data => {\r\n      if(data.message.header.status_code === 404 || data.message.body.lyrics.lyrics_body === \"\"){\r\n        setLyrics(false);\r\n      } else {\r\n      let lyrics =  data.message.body.lyrics.lyrics_body.slice(0, -69);\r\n      setLyrics(lyrics);\r\n      }\r\n    })\r\n    .catch(e => {\r\n      console.error(e);\r\n    });\r\n\r\n  };\r\n\r\n  const resetLyrics = () => {\r\n    setLyrics();\r\n  };\r\n  \r\n  return [lyrics, pickLyrics, resetLyrics];\r\n\r\n};","import { useState } from 'react';\r\n\r\nexport default initialVal => {\r\n\r\n  const [song, setSong] = useState(initialVal);\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  const pickSong = (songUrl, songName) => {\r\n    setSong({ songUrl: songUrl, songName: songName });\r\n  }\r\n\r\n  const play = () => {\r\n    setPlaying(true);\r\n  }\r\n\r\n  return [song, pickSong, playing, play];\r\n\r\n}","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default initialVal => {\r\n\r\n  const [token, setToken] = useState(initialVal);\r\n\r\n  // let authServer = process.env.AUTH_SERVER ? process.env.AUTH_SERVER : 'http://localhost:3001/';\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      axios.get('https://spot-x-match-authserver.herokuapp.com/')\r\n        .then(res => {\r\n          console.log('Token: ', res.data.access_token);\r\n          localStorage.setItem('token', res.data.access_token);\r\n          localStorage.setItem('token_expires_in', getExpirationDate(res.data.expires_in));\r\n          setToken(true);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        })\r\n    };\r\n  }, [token]);\r\n\r\n  const getExpirationDate = (seconds) => {\r\n    let miliseconds = (seconds * 1000 + Date.now());\r\n    console.log('Expires: ', new Date(miliseconds));\r\n    return miliseconds;\r\n  };\r\n\r\n  const Wait = (ms) => {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  };\r\n\r\n  const isTokenExpired = async () => {\r\n    let expiration = localStorage.getItem('token_expires_in');\r\n    if (new Date() > expiration) {\r\n      setToken(false);\r\n      await Wait(500);\r\n      return localStorage.getItem('token');\r\n    } else {\r\n      return localStorage.getItem('token');\r\n    };\r\n  };\r\n\r\n  return [isTokenExpired];\r\n\r\n};\r\n\r\n\r\n","import { useState } from \"react\";\r\nexport default initialVal => {\r\n  const [singles, setSingles] = useState(initialVal);\r\n  const handleSingleChange = (event, newValue) => {\r\n    setSingles(newValue);\r\n  };\r\n  const resetSingles = () => {\r\n    setSingles();\r\n  };\r\n  return [singles, handleSingleChange, resetSingles];\r\n};","import React, { useContext, useState, useEffect } from 'react';\r\nimport useInputState from '../Hooks/useInputState';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styles from '../Styles/SearchBarStyles';\r\n\r\nfunction SearchBar(props) {\r\n\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  const { artist, pickArtist, album, resetAlbum, lyrics, resetLyrics, isTokenExpired } = useContext(ArtistContext);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  }, [artist]);\r\n\r\n  return (\r\n    <form\r\n      className={props.classes.form}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n      onSubmit={ async (e) => {\r\n        e.preventDefault();\r\n        reset();\r\n        if (value === '') return '';\r\n        await pickArtist(value, await isTokenExpired());\r\n        if (album) resetAlbum();\r\n        if (lyrics) resetLyrics();\r\n        setLoading(true);\r\n      }}\r\n    >\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Search\"\r\n        onChange={handleChange}\r\n        value={value}\r\n        placeholder='Artist name...'\r\n        InputProps={{\r\n          classes: {\r\n            notchedOutline: props.classes.notchedOutline\r\n          },\r\n          className: props.classes.input\r\n        }}\r\n        InputLabelProps={{\r\n          style: {\r\n            color: 'gray'\r\n          },\r\n          shrink: true,\r\n          margin: 'dense'\r\n        }}\r\n        variant='outlined'\r\n      />\r\n      <CircularProgress\r\n        size={30}\r\n        className={props.classes.spinner}\r\n        style={{ opacity: isLoading ? 0.8 : 0 }}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","export default {\r\n  notchedOutline: { borderColor: \"black !important\" },\r\n  input: {\r\n    height: '60px',\r\n    width: '300px',\r\n    fontSize: '1rem'\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginTop: '2rem',\r\n    alignItems: 'center'\r\n  },\r\n  spinner: {\r\n    position: 'relative',\r\n    right: '42px'\r\n  }\r\n};","import { useState } from \"react\";\r\nexport default initialVal => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n  return [value, handleChange, reset];\r\n};","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport ReactPlayer from 'react-player'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../Styles/ArtistAvatarStyles';\r\n\r\n\r\nfunction ArtistAvatar(props) {\r\n\r\n  const { resetAlbum, singles, handleSingleChange, artist, song, playing } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div>\r\n      {artist &&\r\n        <div className={props.classes.artistWrapper}>\r\n          <ToggleButtonGroup\r\n            value={singles ? true : false}\r\n            exclusive\r\n            onChange={handleSingleChange}\r\n            aria-label=\"text alignment\"\r\n            style={{ marginBottom: '20px' }}\r\n          >\r\n            <ToggleButton\r\n              value={true}\r\n              aria-label=\"singles-option\"\r\n              disabled={singles ? true : false}\r\n              onClick={() => resetAlbum()}\r\n            >\r\n              {'singles'}\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              value={false}\r\n              aria-label=\"album-option\"\r\n              disabled={!singles ? true : false}\r\n            >\r\n              {'albums'}\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <Card className={props.classes.artistCard}>\r\n            <CardHeader\r\n              avatar={\r\n                <Avatar\r\n                  className={props.classes.artistAvatar}\r\n                  variant=\"square\"\r\n                  src={artist.images[1].url}\r\n                >\r\n                </Avatar>\r\n              }\r\n            />\r\n            <CardContent>\r\n              <Typography\r\n                className={props.classes.artistName}\r\n                gutterBottom\r\n                variant=\"h5\"\r\n                component=\"h2\"\r\n                align='center'\r\n              >\r\n                {artist.name.toUpperCase()}\r\n                <Tooltip\r\n                  className={props.classes.artistTooltip}\r\n                  title='Click to open on Spotify'\r\n                >\r\n                  <LibraryMusicIcon onClick={() => console.log('CLICK')} />\r\n                </Tooltip>\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n          <div className={props.classes.playerWrapper} style={{ opacity: song ? '1' : '0' }}>\r\n            <ReactPlayer\r\n              url={song ? song.songUrl : ''}\r\n              playing={playing}\r\n              controls\r\n              height={50}\r\n              width={330}\r\n              config={{ file: { attributes: { controlsList: 'nodownload' } } }} // Disable download button\r\n              onContextMenu={e => e.preventDefault()} // Disable right click\r\n              className={props.classes.player}\r\n              volume={0.1}\r\n            />\r\n            <Typography\r\n              className={props.classes.nowPlaying}\r\n              gutterBottom noWrap={true}\r\n              variant=\"overline\"\r\n              component=\"h4\"\r\n              align='center'\r\n            >\r\n              {`Playing: ${song ? song.songName : ''}`}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(ArtistAvatar);","export default {\r\n  artistWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  artistCard: {\r\n    maxWidth: 345,\r\n    marginBottom: '20px',\r\n    display: 'inline-block',\r\n    background: 'linear-gradient(90deg, rgba(184,183,200,1) 0%, rgba(153,153,158,1) 0%, rgba(213,213,213,1) 65%)',\r\n    boxShadow: '6px 6px 15px -4px rgba(77,71,77,1)',\r\n    zIndex: 1,\r\n    transition: 'all 0.5s'\r\n  },\r\n  artistAvatar: {\r\n    height: '320px',\r\n    width: '320px',\r\n    borderRadius: '2px'\r\n  },\r\n  artistName: {\r\n    fontWeight: '600',\r\n    color: 'white',\r\n    textShadow: '4px 4px 6px rgba(66,66,66,0.77)'\r\n  },\r\n  artistTooltip: {\r\n    position: 'relative', \r\n    top: '5px', \r\n    left: '10px', \r\n    color: 'rgb(38, 38, 38)'\r\n  },\r\n  playerWrapper: {\r\n    maxWidth: '330px',\r\n    transition: 'opacity 0.3s ease-in'\r\n  },\r\n  nowPlaying: {\r\n    maxHeight: '31px',\r\n    overflow: 'hidden',\r\n    marginTop: '7px'\r\n  }\r\n};","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styles from '../Styles/SongStyles';\r\n\r\nfunction Song(props) {\r\n\r\n  const { artist, pickLyrics, pickSong, play } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div>\r\n      <ListItem \r\n        className={props.classes.song}\r\n        button\r\n        onClick={() => {\r\n          pickLyrics(artist.name, props.songName);\r\n          pickSong(props.songUrl, props.songName);\r\n          play();\r\n        }}\r\n        disabled={props.songUrl === null ? true : false}\r\n      >\r\n        <ListItemText\r\n          secondary={props.songUrl === null ? 'No song available :(' : ''}\r\n          secondaryTypographyProps={{\r\n            classes: {\r\n              root: props.classes.songSubtext\r\n            }\r\n          }}\r\n        >\r\n          <span className={props.classes.songNumber} >{props.index}</span>\r\n          <span className={props.classes.songName} >{props.songName}</span>\r\n        </ListItemText>\r\n      </ListItem>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Song);","export default {\r\n  song: {\r\n    height: '66.4px'\r\n  },\r\n  songName: {\r\n    marginLeft: '15px'\r\n  },\r\n  songSubtext: {\r\n    marginLeft: '23px'\r\n  },\r\n  songNumber: {\r\n    fontWeight: '600', \r\n    fontSize: '14px'\r\n  }\r\n}","import React, { useContext } from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styles from '../Styles/LyricsStyles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\n\r\nfunction Lyrics(props) {\r\n\r\n  const { resetLyrics } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <Grow in={props.playing}>\r\n      <div className={props.classes.lyricsWrapper}>\r\n        <div>\r\n          <IconButton\r\n            className={props.classes.button}\r\n            aria-label=\"delete\"\r\n            onClick={() => resetLyrics()}\r\n            size='small'\r\n          >\r\n            <CloseOutlinedIcon />\r\n          </IconButton>\r\n          <TextareaAutosize\r\n            className={props.classes.lyrics}\r\n            rowsMin={20}\r\n            aria-label=\"maximum height\"\r\n            value={props.songLyrics}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Lyrics);","export default {\r\n  lyricsWrapper: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center', \r\n    alignItems: 'center'\r\n  },\r\n  lyrics: {\r\n    color: 'gray',\r\n    fontFamily: 'Roboto',\r\n    minWidth: '300px',\r\n    maxWidth: '300px',\r\n    height: 'auto',\r\n    maxHeight: '618px',\r\n    textAlign: 'center',\r\n    padding: '25px',\r\n    borderRadius: '5px'\r\n  },\r\n  button: {\r\n    marginBottom: '4px', \r\n    marginRight: 'auto', \r\n    position: 'absolute'\r\n  }\r\n};","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport List from '@material-ui/core/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftSharpIcon from '@material-ui/icons/ChevronLeftSharp';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Song from '../Components/Song';\r\nimport Lyrics from '../Components/Lyrics';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../Styles/SongListStyles';\r\n\r\nfunction TransitionUp(props) {\r\n  return <Slide {...props} direction=\"up\" />;\r\n}\r\n\r\nfunction SongList(props) {\r\n\r\n  const { album, resetAlbum, lyrics, resetLyrics, playing } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div className={props.classes.root}>\r\n      <IconButton\r\n        className={props.classes.button}\r\n        onClick={\r\n          () => {\r\n            resetAlbum();\r\n            resetLyrics();\r\n          }}\r\n      >\r\n        <ChevronLeftSharpIcon fontSize='large' />\r\n      </IconButton>\r\n      <List\r\n        className={props.classes.list}\r\n        component=\"nav\"\r\n        aria-label=\"song list\"\r\n        style={{ width: lyrics ? '330px' : '450px' }}\r\n      >\r\n        <Divider />\r\n        {album.map((song, i) => {\r\n          return <Song songName={song.name} songUrl={song.preview_url} index={i + 1} key={song.id} />\r\n        })}\r\n      </List>\r\n      {\r\n        lyrics === false &&\r\n        <Snackbar\r\n          open={true}\r\n          message='NO LYRICS AVAILABLE'\r\n          TransitionComponent={TransitionUp} \r\n          ContentProps={{\r\n            classes: {\r\n              message: props.classes.snackbarText,\r\n              root: props.classes.snackbar\r\n            }\r\n          }}\r\n        />\r\n      }\r\n      {\r\n        lyrics &&\r\n        <Lyrics songLyrics={lyrics} playing={playing} />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SongList);","export default {\r\n  root: {\r\n    display: 'flex', \r\n    minHeight: '676px'\r\n  },\r\n  list: {\r\n    maxHeight: 676,\r\n    overflow: 'auto',\r\n    padding: 0,\r\n    margin: 'auto'\r\n  },\r\n  button: {\r\n    height: '65px',\r\n    width: '65px',\r\n    marginLeft: '1rem',\r\n    alignSelf: 'center'\r\n  },\r\n  snackbarText: {\r\n    color: 'white',\r\n    fontFamily: 'Roboto',\r\n    fontWeight: '600',\r\n    textShadow: '4px 4px 6px rgba(66,66,66,0.77)'\r\n  },\r\n  snackbar: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#868686'\r\n  }\r\n}","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styles from '../Styles/SingleStyles';\r\n\r\nfunction Single(props) {\r\n\r\n  const { artist, pickLyrics, play, pickSong } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div>\r\n      <ListItem\r\n        className={props.classes.single}\r\n        button\r\n        onClick={async () => {\r\n          pickLyrics(artist.name, props.singleName);\r\n          pickSong(props.singleUrl, props.singleName);\r\n          play();\r\n        }}\r\n        disabled={props.singleUrl === null ? true : false}\r\n      >\r\n        <ListItemAvatar>\r\n          <Avatar\r\n            className={props.classes.singleImage}\r\n            src={props.singleImage}\r\n            variant='rounded'\r\n          />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          secondary={props.singleUrl === null ? 'No song available' : ''}\r\n          secondaryTypographyProps={{\r\n            classes: {\r\n              root: props.classes.singleSubtext\r\n            }\r\n          }}\r\n          primaryTypographyProps={{\r\n            noWrap: true\r\n          }}\r\n        >\r\n          <div className={props.classes.singleNameWrapper} >\r\n            <span className={props.classes.singleName} >{props.singleName}</span>\r\n          </div>\r\n          <p className={props.classes.releasedDate} >{`Released: ${props.releasedDate}`}</p>\r\n        </ListItemText>\r\n      </ListItem>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Single);","export default {\r\n  single: {\r\n    height: '111.5px'\r\n  },\r\n  singleImage: {\r\n    height: '70px', \r\n    width: '70px'\r\n  },\r\n  singleName: {\r\n    marginLeft: '15px'\r\n  },\r\n  singleNameWrapper: {\r\n    overflow: \"hidden\", \r\n    textOverflow: \"ellipsis\"\r\n  },\r\n  singleSubtext: {\r\n    marginLeft: '15px'\r\n  },\r\n  releasedDate: {\r\n    margin: '0',\r\n    marginLeft: '15px',\r\n    fontFamily: 'Roboto',\r\n    fontSize: '12px'\r\n  }\r\n};","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Lyrics from '../Components/Lyrics';\r\nimport Single from '../Components/Single';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../Styles/SinglesListStyles';\r\n\r\nfunction TransitionUp(props) {\r\n  return <Slide {...props} direction=\"up\" />;\r\n}\r\n\r\nfunction SinglesList(props) {\r\n\r\n  const { artist, lyrics, playing } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div className={props.classes.root}>\r\n      <List\r\n        className={props.classes.list}\r\n        component=\"nav\"\r\n        aria-label=\"song list\"\r\n        style={{ width: lyrics ? '370px' : '450px' }}\r\n      >\r\n        <Divider />\r\n        {artist.singles.map((single) => {\r\n          return (<Single\r\n            singleName={single.name}\r\n            singleImage={single.image}\r\n            singleID={single.id}\r\n            key={single.id}\r\n            releasedDate={single.release_date}\r\n            singleUrl={single.preview_url}\r\n          />)\r\n        })}\r\n      </List>\r\n      {\r\n        lyrics === false &&\r\n        <Snackbar\r\n          open={true}\r\n          message='NO LYRICS AVAILABLE'\r\n          TransitionComponent={TransitionUp}\r\n          ContentProps={{\r\n            classes: {\r\n              message: props.classes.snackbarText,\r\n              root: props.classes.snackbar\r\n            }\r\n          }}\r\n        />\r\n      }\r\n      {\r\n        lyrics &&\r\n        <Lyrics songLyrics={lyrics} playing={playing} />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SinglesList);","export default {\r\n  root: {\r\n    display: 'flex', \r\n    minHeight: '676px',\r\n    justifyContent: 'space-between'\r\n  },\r\n  list: {\r\n    maxHeight: 676,\r\n    overflow: 'auto',\r\n    padding: 0,\r\n    margin: 'auto'\r\n  },\r\n  button: {\r\n    height: '65px',\r\n    width: '65px',\r\n    marginRight: 'auto',\r\n    marginLeft: '2rem',\r\n    alignSelf: 'center'\r\n  },\r\n  snackbarText: {\r\n    color: 'white',\r\n    fontFamily: 'Roboto',\r\n    fontWeight: '600',\r\n    textShadow: '4px 4px 6px rgba(66,66,66,0.77)'\r\n  },\r\n  snackbar: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#868686'\r\n  }\r\n}","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../Styles/AlbumStyles';\r\n\r\nfunction Album(props) {\r\n\r\n  const { artist, pickAlbum, isTokenExpired } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div style={{ margin: artist.albums.length < 3 ? 'auto' : '' }}>\r\n      <GridListTile\r\n        className={props.classes.albumGrid}\r\n        key={props.albumId}\r\n        onClick={\r\n          async () => {\r\n            await pickAlbum(props.albumId, await isTokenExpired())\r\n          }\r\n        }\r\n      >\r\n        <img\r\n          className={props.classes.albumArt}\r\n          src={props.albumCover}\r\n          alt={'Album cover'}\r\n        />\r\n        <GridListTileBar\r\n          title={props.albumName}\r\n          subtitle={<span>Released: {props.releasedDate}</span>}\r\n        />\r\n      </GridListTile>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Album);","export default {\r\n  albumGrid: {\r\n    margin: '0.5px',\r\n    cursor: 'pointer',\r\n    transition: 'opacity 0.3s ease-in',\r\n    '&:hover':{\r\n      opacity: '0.65'\r\n    }\r\n  },\r\n  albumArt: {\r\n    height: '220px',\r\n    width: '220px'\r\n  }\r\n};","import React, { useContext } from 'react';\r\nimport { ArtistContext } from '../Context/ArtistContext';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport SongList from './SongsList';\r\nimport SinglesList from './SinglesList';\r\nimport Album from './Album';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../Styles/AlbumGridStyles';\r\n\r\nfunction AlbumsGrid(props) {\r\n\r\n  const { artist, album, singles } = useContext(ArtistContext);\r\n\r\n  return (\r\n    <div className={props.classes.root}>\r\n      {artist && !album && !singles &&\r\n        <GridList cellHeight='auto' className={props.classes.gridList}>\r\n          {artist.albums.map(album => (\r\n            <Album \r\n              albumId={album.id}\r\n              albumCover={album.images[1].url}\r\n              albumName={album.name}\r\n              releasedDate={album.release_date}\r\n              key={album.id}\r\n            />\r\n          ))}\r\n        </GridList>\r\n      }\r\n      {\r\n        album &&\r\n        <SongList />\r\n      }\r\n      {\r\n        artist && singles &&\r\n        <SinglesList />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(AlbumsGrid);","export default {\r\n  root: {\r\n    width: 800\r\n  },\r\n  gridList: {\r\n    width: 680,\r\n    maxHeight: 676,\r\n    margin: 'auto !important'\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport SearchBar from './Components/SearchBar';\nimport ArtistAvatar from './Components/ArtistAvatar';\nimport AlbumsGrid from './Components/AlbumsGrid';\nimport { ArtistProvider } from './Context/ArtistContext';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArtistProvider>\n        <SearchBar />\n        <Container className=\"container\" maxWidth=\"lg\" >\n          <ArtistAvatar />\n          <AlbumsGrid />\n        </Container>\n      </ArtistProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}